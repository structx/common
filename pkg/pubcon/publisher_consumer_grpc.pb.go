// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: protos/publisher_consumer.proto

package pubcon_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubConServiceClient is the client API for PubConService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubConServiceClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Consume(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (PubConService_ConsumeClient, error)
}

type pubConServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubConServiceClient(cc grpc.ClientConnInterface) PubConServiceClient {
	return &pubConServiceClient{cc}
}

func (c *pubConServiceClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pubcon.PubConService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubConServiceClient) Consume(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (PubConService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubConService_ServiceDesc.Streams[0], "/pubcon.PubConService/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubConServiceConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubConService_ConsumeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubConServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *pubConServiceConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubConServiceServer is the server API for PubConService service.
// All implementations must embed UnimplementedPubConServiceServer
// for forward compatibility
type PubConServiceServer interface {
	Publish(context.Context, *Message) (*emptypb.Empty, error)
	Consume(*Subscription, PubConService_ConsumeServer) error
	mustEmbedUnimplementedPubConServiceServer()
}

// UnimplementedPubConServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPubConServiceServer struct {
}

func (UnimplementedPubConServiceServer) Publish(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPubConServiceServer) Consume(*Subscription, PubConService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedPubConServiceServer) mustEmbedUnimplementedPubConServiceServer() {}

// UnsafePubConServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubConServiceServer will
// result in compilation errors.
type UnsafePubConServiceServer interface {
	mustEmbedUnimplementedPubConServiceServer()
}

func RegisterPubConServiceServer(s grpc.ServiceRegistrar, srv PubConServiceServer) {
	s.RegisterService(&PubConService_ServiceDesc, srv)
}

func _PubConService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubConServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubcon.PubConService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubConServiceServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubConService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubConServiceServer).Consume(m, &pubConServiceConsumeServer{stream})
}

type PubConService_ConsumeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubConServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *pubConServiceConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// PubConService_ServiceDesc is the grpc.ServiceDesc for PubConService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubConService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubcon.PubConService",
	HandlerType: (*PubConServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubConService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _PubConService_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/publisher_consumer.proto",
}
