// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/message_broker.proto

package message_broker_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageBrokerServiceClient is the client API for MessageBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBrokerServiceClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (MessageBrokerService_SubscribeClient, error)
	RequestResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type messageBrokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBrokerServiceClient(cc grpc.ClientConnInterface) MessageBrokerServiceClient {
	return &messageBrokerServiceClient{cc}
}

func (c *messageBrokerServiceClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/message_broker.MessageBrokerService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBrokerServiceClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (MessageBrokerService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageBrokerService_ServiceDesc.Streams[0], "/message_broker.MessageBrokerService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBrokerServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageBrokerService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageBrokerServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *messageBrokerServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageBrokerServiceClient) RequestResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/message_broker.MessageBrokerService/RequestResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageBrokerServiceServer is the server API for MessageBrokerService service.
// All implementations must embed UnimplementedMessageBrokerServiceServer
// for forward compatibility
type MessageBrokerServiceServer interface {
	Publish(context.Context, *Message) (*empty.Empty, error)
	Subscribe(*Subscription, MessageBrokerService_SubscribeServer) error
	RequestResponse(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedMessageBrokerServiceServer()
}

// UnimplementedMessageBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBrokerServiceServer struct {
}

func (UnimplementedMessageBrokerServiceServer) Publish(context.Context, *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessageBrokerServiceServer) Subscribe(*Subscription, MessageBrokerService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessageBrokerServiceServer) RequestResponse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResponse not implemented")
}
func (UnimplementedMessageBrokerServiceServer) mustEmbedUnimplementedMessageBrokerServiceServer() {}

// UnsafeMessageBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBrokerServiceServer will
// result in compilation errors.
type UnsafeMessageBrokerServiceServer interface {
	mustEmbedUnimplementedMessageBrokerServiceServer()
}

func RegisterMessageBrokerServiceServer(s grpc.ServiceRegistrar, srv MessageBrokerServiceServer) {
	s.RegisterService(&MessageBrokerService_ServiceDesc, srv)
}

func _MessageBrokerService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message_broker.MessageBrokerService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServiceServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBrokerService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBrokerServiceServer).Subscribe(m, &messageBrokerServiceSubscribeServer{stream})
}

type MessageBrokerService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageBrokerServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *messageBrokerServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageBrokerService_RequestResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServiceServer).RequestResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message_broker.MessageBrokerService/RequestResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServiceServer).RequestResponse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageBrokerService_ServiceDesc is the grpc.ServiceDesc for MessageBrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message_broker.MessageBrokerService",
	HandlerType: (*MessageBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MessageBrokerService_Publish_Handler,
		},
		{
			MethodName: "RequestResponse",
			Handler:    _MessageBrokerService_RequestResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageBrokerService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/message_broker.proto",
}
